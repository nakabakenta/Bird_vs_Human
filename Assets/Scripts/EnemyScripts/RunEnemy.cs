using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class RunEnemy : MonoBehaviour
{
    //ステータス
    private int hp = EnemyStatus.RunEnemy.hp;        //体力
    private float speed = EnemyStatus.RunEnemy.speed;//移動速度
    private float jump = EnemyStatus.RunEnemy.jump;  //ジャンプ力
    //処理
    private int random = 0;       //ランダム
    private float interval = 0.0f;//間隔
    private string nowAction;     //現在のアクション
    private bool action = false;  //アクションフラグ
    private float viewPointX;     //ビューポイント座標.X
    //このオブジェクトのコンポーネント
    private Transform thisTransform;  //"Transform"(このオブジェクト)
    private Animator animator = null; //"Animator"(このオブジェクト)
    //他のオブジェクトのコンポーネント
    private Transform playerTransform;//"Transform"(プレイヤー)

    //private Rigidbody rigidBody;

    // Start is called before the first frame update
    void Start()
    {
        thisTransform = this.gameObject.GetComponent<Transform>();//このオブジェクトの"Transform"を取得
        animator = this.GetComponent<Animator>();                 //このオブジェクトの"Animator"を取得
        animator.SetInteger("Motion", 0);                         //アニメーションを"Motion, 0"(走る)にする
        playerTransform = GameObject.Find("Player").transform;    //
        nowAction = "Run";
        //rigidBody = this.GetComponent<Rigidbody>();
    }

    // Update is called once per frame
    void Update()
    {
        //このオブジェクトのビューポート座標を取得
        viewPointX = Camera.main.WorldToViewportPoint(this.transform.position).x;//ビューポート座標.X

        //体力が0より上 && ビューポート座標.Xが1より上であれば
        if (hp > 0 && viewPointX < 1)
        {
            Behavior();//行動関数を呼び出す
        }
        //体力が0以下 && ビューポート座標.Xが0未満であれば
        else if (hp <= 0 && viewPointX < 0)
        {
            Destroy(this.gameObject);//このオブジェクトを消す
        }
    }

    //行動関数
    void Behavior()
    {
        Vector3 localPosition = thisTransform.localPosition;//
        Vector3 localAngle = thisTransform.localEulerAngles;//

        if (this.transform.position.x + EnemyStatus.RunEnemy.rangeX > playerTransform.position.x &&
            this.transform.position.x - EnemyStatus.RunEnemy.rangeX < playerTransform.position.x &&
            this.transform.position.y + EnemyStatus.RunEnemy.rangeY < playerTransform.position.y &&
            nowAction == "Run" && action == false && this.transform.position.y == 0.0f)
        {
            action = true;
            nowAction = "jump";
            Animation();
        }

        if(nowAction == "Run")
        {
            localPosition.y = 0.0f;//
        }

        localPosition.z = 0.0f;//

        //
        if (this.transform.position.x > playerTransform.position.x)
        {
            localAngle.y = -EnemyStatus.rotationY;//
        }
        //
        else if (this.transform.position.x < playerTransform.position.x)
        {
            localAngle.y = EnemyStatus.rotationY;//
        }

        thisTransform.localPosition = localPosition;//ローカル座標での座標を設定
        thisTransform.localEulerAngles = localAngle;//

        //
        if (nowAction == "Run")
        {
            this.transform.position += speed * transform.forward * Time.deltaTime;//前方向に移動する
        }
        //
        else if (nowAction != "Run" && action == true)
        {
            Wait();
        }

        //
        if (PlayerController.hp <= 0 && action == false)
        {
            Animation();//アニメーション関数を実行
        }
    }

    //アニメーション関数
    void Animation()
    {
        if (PlayerController.hp > 0 && nowAction == "Attack")
        {
            random = (int)Random.Range(1, 3);     //ランダム処理(1〜2)
            animator.SetInteger("Motion", random);//"Animator"の"Motion, 1〜2"(攻撃)を有効にする
            Debug.Log(random);                    //デバックログ
        }
        else if(PlayerController.hp > 0 && nowAction == "jump")
        {
            animator.SetInteger("Motion", 10);
        }
        else if (PlayerController.hp <= 0)
        {
            nowAction = "Dance";
            animator.SetInteger("Motion", 3);//"Animator"の"Motion, 3"(ダンス)を有効にする
        }
    }

    //待機関数
    void Wait()
    {
        interval += Time.deltaTime;//クールタイムにTime.deltaTimeを足す

        if (nowAction == "Attack")
        {
            //
            if (random == 1)
            {
                //
                if (interval >= 2.0f)
                {
                    interval = 0.0f;                 //
                    animator.SetInteger("Motion", 0);//
                    action = false;
                    nowAction = "Run";
                }
            }
            //
            else if (random == 2)
            {
                //
                if (interval >= 1.5f)
                {
                    interval = 0.0f;
                    animator.SetInteger("Motion", 0);//
                    action = false;
                    nowAction = "Run";
                }
            }
        }
        //
        else if(nowAction == "jump")
        {
            if (interval >= 0.75f)
            {
                this.transform.position += jump * transform.up * Time.deltaTime;

                if(interval >= 1.0f)
                {
                    animator.SetFloat("MoveSpeed", 0.0f);//一時停止
                }

                //
                if (interval >= 2.0f)
                {
                    animator.SetFloat("MoveSpeed", 1.0f);//
                    interval = 0.0f;
                    animator.SetInteger("Motion", 0);//
                    action = false;
                    nowAction = "Run";
                }
            }
        }
    }

    //ダメージ関数
    void Damage()
    {
        hp -= 1;//体力を"-1"する

        //体力が0以下だったら
        if (hp <= 0)
        {
            Death();//関数"Death"死亡を呼び出す
        }
    }

    //死亡関数
    void Death()
    {
        this.transform.position = new Vector3(thisTransform.position.x, 0.0f, thisTransform.position.z);
        hp = 0;                                         //体力を"0"にする
        GameManager.score += EnemyStatus.RunEnemy.score;//
        this.tag = "Death";                             //タグを"Death"に変更する
        animator.SetInteger("Motion", 4);               //
    }

    //当たり判定(OnTriggerEnter)
    void OnTriggerEnter(Collider collision)
    {
        //衝突したオブジェクトのタグが"Player" && "action"が"false"だったら
        if (collision.gameObject.tag == "Player" && action == false)
        {
            action = true;
            nowAction = "Attack";
            Animation();
        }
        //タグBulletの付いたオブジェクトに衝突したら
        if (collision.gameObject.tag == "Bullet" && hp > 0)
        {
            Damage();//関数Damageを呼び出す
        }
    }
}
